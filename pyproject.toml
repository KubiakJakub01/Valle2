[tool.poetry]
name = "valle"
version = "0.1.0"
description = "Implementation of TTS and ASR model based on VALL-E X architecture"
authors = ["KubiakJakub01 <kubiak.jakub01@gmail.com>"]
readme = "README.md"

[tool.poetry-exec-plugin.commands]
ruff = "ruff check valle"
mypy = "mypy --ignore-missing-imports valle"
pylint = "pylint --rcfile pyproject.toml valle"
pytest = "pytest --cache-clear --cov=valle --disable-warnings tests"

[tool.poetry.dependencies]
python = "^3.10"
torch = { version = "2.2.1+cu121", source = "torch" }
torchaudio = { version = "2.2.1+cu121", source = "torch" }
einops = "^0.8.0"
numpy = "^1.26.4"
coloredlogs = "^15.0.1"
matplotlib = "^3.8.4"
sox = "^1.5.0"
librosa = "^0.10.2.post1"
encodec = "^0.1.1"
transformers = "4.38.2"
lightning = "^2.3.3"
datasets = "^2.20.0"
tensorboard = "^2.17.0"
speechbrain = "^1.0.0"

[[tool.poetry.source]]
name = "torch"
url = "https://download.pytorch.org/whl/cu121"
priority = "supplemental"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
ruff = "^0.3.5"
mypy = "^1.9.0"
pylint = "^3.1.0"
pytest = "^8.2.1"
pytest-cov = "^5.0.0"

[tool.pylint]
max-line-length = 100
disable = ["missing-docstring",
            "invalid-name",
            "too-many-instance-attributes",
            "too-many-arguments",
            "method-hidden",
            "too-many-locals",
            "consider-using-from-import",
            "relative-beyond-top-level",
            "too-many-ancestors",
            "duplicate-code",
            "too-few-public-methods"]
fail-under = 10.0
generated-members=["numpy.*","torch.*"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
